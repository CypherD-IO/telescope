/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs-rn/cosmwasm-stargate";
import { StdFee } from "@cosmjs-rn/amino";
import { Timestamp, Uint64, Uint128, ConfigResponse, Coin, Addr, Config, ExecuteMsg, Decimal, InstantiateMsg, InstantiateMsg1, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, QueryMsg } from "./Minter.types";
import { MinterQueryClient, MinterClient } from "./Minter.client";
export interface MinterReactQuery<TResponse> {
  client: MinterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MinterMintCountQuery extends MinterReactQuery<MintCountResponse> {
  args: {
    address: string;
  };
}
export function useMinterMintCountQuery({
  client,
  args,
  options
}: MinterMintCountQuery) {
  return useQuery<MintCountResponse, Error, MintCountResponse, (string | undefined)[]>(["minterMintCount", client?.contractAddress, JSON.stringify(args)], () => client ? client.mintCount({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MinterMintPriceQuery extends MinterReactQuery<MintPriceResponse> {}
export function useMinterMintPriceQuery({
  client,
  options
}: MinterMintPriceQuery) {
  return useQuery<MintPriceResponse, Error, MintPriceResponse, (string | undefined)[]>(["minterMintPrice", client?.contractAddress], () => client ? client.mintPrice() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MinterStartTimeQuery extends MinterReactQuery<StartTimeResponse> {}
export function useMinterStartTimeQuery({
  client,
  options
}: MinterStartTimeQuery) {
  return useQuery<StartTimeResponse, Error, StartTimeResponse, (string | undefined)[]>(["minterStartTime", client?.contractAddress], () => client ? client.startTime() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MinterMintableNumTokensQuery extends MinterReactQuery<MintableNumTokensResponse> {}
export function useMinterMintableNumTokensQuery({
  client,
  options
}: MinterMintableNumTokensQuery) {
  return useQuery<MintableNumTokensResponse, Error, MintableNumTokensResponse, (string | undefined)[]>(["minterMintableNumTokens", client?.contractAddress], () => client ? client.mintableNumTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MinterConfigQuery extends MinterReactQuery<ConfigResponse> {}
export function useMinterConfigQuery({
  client,
  options
}: MinterConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(["minterConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MinterWithdrawMutation {
  client: MinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterWithdrawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(fee, memo, funds), options);
}
export interface MinterMintForMutation {
  client: MinterClient;
  msg: {
    recipient: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMintForMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMintForMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintFor(msg, fee, memo, funds), options);
}
export interface MinterMintToMutation {
  client: MinterClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMintToMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMintToMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintTo(msg, fee, memo, funds), options);
}
export interface MinterUpdatePerAddressLimitMutation {
  client: MinterClient;
  msg: {
    perAddressLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUpdatePerAddressLimitMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterUpdatePerAddressLimitMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePerAddressLimit(msg, fee, memo, funds), options);
}
export interface MinterUpdateStartTimeMutation {
  client: MinterClient;
  msg: Timestamp;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUpdateStartTimeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterUpdateStartTimeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateStartTime(msg, fee, memo, funds), options);
}
export interface MinterSetWhitelistMutation {
  client: MinterClient;
  msg: {
    whitelist: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterSetWhitelistMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterSetWhitelistMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setWhitelist(msg, fee, memo, funds), options);
}
export interface MinterMintMutation {
  client: MinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(fee, memo, funds), options);
}
