/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs-rn/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs-rn/amino";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForEmpty, Empty, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, ExecuteMsgForEmpty, Binary, MintMsgForEmpty, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./Sg721.types";
import { Sg721QueryClient, Sg721Client } from "./Sg721.client";
export interface Sg721ReactQuery<TResponse> {
  client: Sg721QueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Sg721CollectionInfoQuery extends Sg721ReactQuery<CollectionInfoResponse> {}
export function useSg721CollectionInfoQuery({
  client,
  options
}: Sg721CollectionInfoQuery) {
  return useQuery<CollectionInfoResponse, Error, CollectionInfoResponse, (string | undefined)[]>(["sg721CollectionInfo", client?.contractAddress], () => client ? client.collectionInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721MinterQuery extends Sg721ReactQuery<MinterResponse> {}
export function useSg721MinterQuery({
  client,
  options
}: Sg721MinterQuery) {
  return useQuery<MinterResponse, Error, MinterResponse, (string | undefined)[]>(["sg721Minter", client?.contractAddress], () => client ? client.minter() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721AllTokensQuery extends Sg721ReactQuery<AllTokensResponse> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSg721AllTokensQuery({
  client,
  args,
  options
}: Sg721AllTokensQuery) {
  return useQuery<AllTokensResponse, Error, AllTokensResponse, (string | undefined)[]>(["sg721AllTokens", client?.contractAddress, JSON.stringify(args)], () => client ? client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721TokensQuery extends Sg721ReactQuery<TokensResponse> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721TokensQuery({
  client,
  args,
  options
}: Sg721TokensQuery) {
  return useQuery<TokensResponse, Error, TokensResponse, (string | undefined)[]>(["sg721Tokens", client?.contractAddress, JSON.stringify(args)], () => client ? client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721AllNftInfoQuery extends Sg721ReactQuery<AllNftInfoResponse> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721AllNftInfoQuery({
  client,
  args,
  options
}: Sg721AllNftInfoQuery) {
  return useQuery<AllNftInfoResponse, Error, AllNftInfoResponse, (string | undefined)[]>(["sg721AllNftInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721NftInfoQuery extends Sg721ReactQuery<NftInfoResponse> {
  args: {
    tokenId: string;
  };
}
export function useSg721NftInfoQuery({
  client,
  args,
  options
}: Sg721NftInfoQuery) {
  return useQuery<NftInfoResponse, Error, NftInfoResponse, (string | undefined)[]>(["sg721NftInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.nftInfo({
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721ContractInfoQuery extends Sg721ReactQuery<ContractInfoResponse> {}
export function useSg721ContractInfoQuery({
  client,
  options
}: Sg721ContractInfoQuery) {
  return useQuery<ContractInfoResponse, Error, ContractInfoResponse, (string | undefined)[]>(["sg721ContractInfo", client?.contractAddress], () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721NumTokensQuery extends Sg721ReactQuery<NumTokensResponse> {}
export function useSg721NumTokensQuery({
  client,
  options
}: Sg721NumTokensQuery) {
  return useQuery<NumTokensResponse, Error, NumTokensResponse, (string | undefined)[]>(["sg721NumTokens", client?.contractAddress], () => client ? client.numTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721AllOperatorsQuery extends Sg721ReactQuery<AllOperatorsResponse> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721AllOperatorsQuery({
  client,
  args,
  options
}: Sg721AllOperatorsQuery) {
  return useQuery<AllOperatorsResponse, Error, AllOperatorsResponse, (string | undefined)[]>(["sg721AllOperators", client?.contractAddress, JSON.stringify(args)], () => client ? client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721ApprovalsQuery extends Sg721ReactQuery<ApprovalsResponse> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721ApprovalsQuery({
  client,
  args,
  options
}: Sg721ApprovalsQuery) {
  return useQuery<ApprovalsResponse, Error, ApprovalsResponse, (string | undefined)[]>(["sg721Approvals", client?.contractAddress, JSON.stringify(args)], () => client ? client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721ApprovalQuery extends Sg721ReactQuery<ApprovalResponse> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSg721ApprovalQuery({
  client,
  args,
  options
}: Sg721ApprovalQuery) {
  return useQuery<ApprovalResponse, Error, ApprovalResponse, (string | undefined)[]>(["sg721Approval", client?.contractAddress, JSON.stringify(args)], () => client ? client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721OwnerOfQuery extends Sg721ReactQuery<OwnerOfResponse> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721OwnerOfQuery({
  client,
  args,
  options
}: Sg721OwnerOfQuery) {
  return useQuery<OwnerOfResponse, Error, OwnerOfResponse, (string | undefined)[]>(["sg721OwnerOf", client?.contractAddress, JSON.stringify(args)], () => client ? client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Sg721BurnMutation {
  client: Sg721Client;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721BurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721BurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721BurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface Sg721MintMutation {
  client: Sg721Client;
  msg: MintMsgForEmpty;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721MintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721MintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721MintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface Sg721RevokeAllMutation {
  client: Sg721Client;
  msg: {
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721RevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721RevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721RevokeAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAll(msg, fee, memo, funds), options);
}
export interface Sg721ApproveAllMutation {
  client: Sg721Client;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721ApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721ApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721ApproveAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveAll(msg, fee, memo, funds), options);
}
export interface Sg721RevokeMutation {
  client: Sg721Client;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721RevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721RevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721RevokeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revoke(msg, fee, memo, funds), options);
}
export interface Sg721ApproveMutation {
  client: Sg721Client;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721ApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721ApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721ApproveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approve(msg, fee, memo, funds), options);
}
export interface Sg721SendNftMutation {
  client: Sg721Client;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721SendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721SendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721SendNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendNft(msg, fee, memo, funds), options);
}
export interface Sg721TransferNftMutation {
  client: Sg721Client;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSg721TransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721TransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Sg721TransferNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferNft(msg, fee, memo, funds), options);
}
